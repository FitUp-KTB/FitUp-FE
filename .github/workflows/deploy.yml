name: CI/CD Pipeline for Frontend

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Docker Tag
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          if [ "$BRANCH_NAME" == "main" ]; then
            IMAGE_NAME="${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest"
          else
            IMAGE_NAME="${{ secrets.DOCKER_HUB_USERNAME }}/frontend-dev:latest"
          fi
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}
          no-cache: true
          build-args: |
            NEXT_PUBLIC_API_BASE_URL=${{ secrets.NEXT_PUBLIC_API_BASE_URL }}

  deploy:
    name: Deploy Frontend Container
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}

    steps:
      - name: Deploy to Remote Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if [ "${GITHUB_REF##*/}" == "main" ]; then
              IMAGE_NAME=${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest
              CONTAINER_NAME=frontend
            else
              IMAGE_NAME=${{ secrets.DOCKER_HUB_USERNAME }}/frontend-dev:latest
              CONTAINER_NAME=frontend-dev
            fi

            docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" -p "${{ secrets.DOCKER_HUB_PASSWORD }}"
            docker pull $IMAGE_NAME

            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            docker run -d \
              --name $CONTAINER_NAME \
              -p 3000:3000 \
              --restart unless-stopped \
              $IMAGE_NAME